FROM yi/tflow-gui:latest

MAINTAINER Igor Rabkin <igor.rabkin@xiaoyi.com>

###################################################################
#            Installing Dependences For Python v. 3.6.8           #
###################################################################

RUN add-apt-repository ppa:jonathonf/python-3.6 && \
    apt-get update && apt-get install -y --no-install-recommends \
    python3.6 \
    python3.6-dev \
    python3.6-venv \
    && \ 
    apt-get clean && \ 
    rm -rf /var/lib/apt/lists/*
	
RUN ln -s /usr/bin/python3.6 /usr/local/bin/python3 && \
    ln -s /usr/local/bin/pip /usr/local/bin/pip3 && \
    ln -s /usr/bin/python3.6 /usr/local/bin/python
 
ARG PY=python3.6 
RUN ${PY} --version && \
    curl -fSsL -O ftp://jenkins-cloud/pub/Develop/get-pip.py && \
    ${PY} get-pip.py && \
    rm get-pip.py 

 
############################################################
#            Installing Caffe & Python Dependences         #
############################################################

RUN apt-get update && apt-get install -y --no-install-recommends \ 
         apt-utils \
         mlocate \
         doxygen \		 
         libatlas-base-dev \ 
         libboost-all-dev \ 
         libgflags-dev \ 
         libgoogle-glog-dev \ 
         libhdf5-serial-dev \ 
         libleveldb-dev \ 
         liblmdb-dev \ 
         libopencv-dev \ 
         libprotobuf-dev \ 
         libsnappy-dev \
         libopenblas-dev \		 
         protobuf-compiler 
	 
	 
#######################################
#            Installing cmake         #
#######################################

RUN \
    cd ~ && \
    version=3.12 && \
    build=3 && \
    mkdir ~/temp && \
    cd temp && \
    wget https://cmake.org/files/v$version/cmake-$version.$build.tar.gz && \
    tar -xzvf cmake-$version.$build.tar.gz && \
    cd cmake-$version.$build && \
    ./bootstrap && \
    make -j$nc && \
    make install && \
    cmake --version && \
    cd ~ && \
    rm -rf temp
    
  
#######################################
#          Set ENV Variables          #
#######################################

ENV PYTHONPATH="${PYTHONPATH}:/opt/caffe/python"
ENV CUDA_ARCH_BIN="52 61 70" 
 
 
################################################################## 
#              Pick up some TF dependencies                      #
##################################################################

RUN apt-get update && apt-get install -y --no-install-recommends \ 		 
    libfreetype6-dev \
    libpng-dev \ 
    libzmq3-dev \
    libcurl3-dev \
    libgoogle-perftools-dev \		 
    pkg-config \  
    python3-tk && \    
    apt-get clean && \ 
    rm -rf /var/lib/apt/lists/* && \
    curl -SL ftp://jenkins-cloud/pub/Tflow-VNC-Soft/Caffe/tf_requirements.txt -o /tmp/tf_requirements.txt && \
    for tf_req in $(cat /tmp/tf_requirements.txt); do ${PY} -m pip --no-cache-dir install $tf_req; done && \
    ${PY} -m ipykernel.kernelspec && \
    apt-get clean && \ 
    rm -rf /var/lib/apt/lists/*
	
	
################################################################## 
#              Installing XIAOYI Packages                        #
##################################################################

ARG INSTALL_DIR=/root/.pip
RUN if [ ! -d "$INSTALL_DIR" ]; then mkdir -p $INSTALL_DIR; fi
COPY pip.conf $INSTALL_DIR
RUN ${PY} -m pip install xiaoyi --upgrade && \
    apt-get clean && \ 
    rm -rf /var/lib/apt/lists/*
    
    
#############################################################
#              Installing NCCL Packages                     #
#############################################################

RUN cd /tmp && \
    git clone --branch=master --depth=1 https://github.com/NVIDIA/nccl.git && \
    cd nccl && \
    # Reduce the binary size, to only include the architecture of the target platforms
    make -j$nc src.build NVCC_GENCODE="-gencode=arch=compute_52,code=sm_52 -gencode=arch=compute_61,code=sm_61 -gencode=arch=compute_70,code=sm_70" && \
    make -j$nc && \
    make install && \
    # Check installed NCCL verion
    updatedb && \
    locate nccl| grep "libnccl.so" | tail -n1 | sed -r 's/^.*\.so\.//' && \
    cd .. && rm -rf nccl
    
    
###################################
# Install TensorFlow GPU version. #
###################################

RUN cd /
ARG FTP_PATH
ARG FILE_NAME
RUN curl -OSL ${FTP_PATH} -o ${FILE_NAME} && \
    pip --no-cache-dir install --upgrade ${FILE_NAME} && \
    rm -f ${FILE_NAME} && \
## Verify Tensorflow Installation
python -c "import tensorflow as tf;print(tf.reduce_sum(tf.random.normal([1000, 1000])))"
    
 
##################################################
# Configure the build for our CUDA configuration #
##################################################

ENV CI_BUILD_PYTHON python
ENV LD_LIBRARY_PATH /usr/local/cuda/extras/CUPTI/lib64:$LD_LIBRARY_PATH
ENV TF_NEED_CUDA 1
ENV TF_CUDA_COMPUTE_CAPABILITIES=5.2,6.1
ENV TF_CUDA_VERSION=9.0
ENV TF_CUDNN_VERSION=7
ENV TF_NCCL_VERSION=2.4


###########################################################
#       Installing yi-dockeradmin inside docker image     #
###########################################################
RUN ln -s /media/common/IT/YiDockerScripts/yi-dockeradmin /usr/local/bin/yi-dockeradmin && \
    sed -i '$a\\' /etc/bash.bashrc && \
    sed -i '$a\###### Adding yi-dockeradmin Function ######\' /etc/bash.bashrc && \
    sed -i '$a\source /usr/local/bin/yi-dockeradmin\' /etc/bash.bashrc && \
    sed -i '$a\############################################\' /etc/bash.bashrc
